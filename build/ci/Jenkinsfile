#!groovy

import groovy.json.JsonOutput

pipeline {
  agent none

  environment {
    NS1_BRANCH = env.BRANCH_NAME.toLowerCase()
    GOCACHE = '/tmp'
    AWX_RO=credentials('awx-ro')
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '25'))
    timeout(time: 1, unit: 'HOURS')
    skipDefaultCheckout(true)
  }

  stages {
    stage('PrepareRun') {
      agent any
      
      stages {
        stage ('Checkout') {
          steps {
            print "Checking out branch ${NS1_BRANCH}"
            checkout scm
          }
        }
      }
    }
    stage ('TestBuild') {
      agent {
        dockerfile {
          filename 'build/ci/Dockerfile.CI'
          args '-v ${WORKSPACE}:/go/src/github.com/nginxinc/crossplane-go'
        }
      }

      steps {
        print "Running tests against crossplane-go branch ${NS1_BRANCH} Number ${BUILD_NUMBER}"

        sh """
          make BUILD_IN_CONTAINER=0 test
          make lint
        """

        print "Building crossplane-go branch ${NS1_BRANCH} Number ${BUILD_NUMBER}"

        sh """
          make BUILD_IN_CONTAINER=0 build
        """
      }
    }
  }

  post {
    always {
      print "Cleaning up workspace"
    }
    success {
      print "SUCCESSFUL"
    }
    failure {
      print "FAILED"

      script {
        if (BRANCH_NAME == 'master') {
          slackSend(
            color: '#FF0000', 
            channel: '#crossplane-go',
            message: "FAILED: Job ${JOB_NAME} [${BUILD_NUMBER}] (${RUN_DISPLAY_URL}) :peter_wow:"
          )
        }
      }
    }
    cleanup {
      print "Cleaning up"

      node('master') {
        deleteDir()
      }
    }
  }
}